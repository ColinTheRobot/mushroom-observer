#
#  This is a log of the installation of a production server in August 2014.
#
#  It starts out fairly generic, and becomes increasingly specific to Mushroom
#  Observer.  Look for the following "variables":
#
#    IP_ADDR            ip address of new server  80.77.87.191  r8Vxf1v1wm
#    OTHER_IP_ADDR      ip address of old server
#    DOMAIN             mushroomobserver.org
#    SITE               mo
#    FLAVOR             trusty
#    USER               jason
#    USER_PASSWORD      xxx
#    DATA_PASSWORD      xxx                       k498dnt4
#    MAIL_PASSWORD      xxx
#    YOUR_EMAIL         pellaea@gmail.com
#    FULL_NAME          Jason Hollinger
#
#  Present production package versions are: (as of 20140301)
#
#  packages:
#    ubuntu (14.04)
#    ruby (1.9.3-p545)
#    rubygems (2.2.2)
#    nginx (1.4.5)
#    postfix (2.10.0)
#    mysql (14.14)
#
#  gems:
#   actionmailer (2.1.1)
#   actionpack (2.1.1)
#   activerecord (2.1.1)
#   activeresource (2.1.1)
#   activesupport (2.1.1)
#   bigdecimal (1.1.0)
#   io-console (0.3)
#   json (1.5.5)
#   kgio (2.9.2)
#   minitest (2.5.1)
#   mysql2 (0.3.15)
#   rack (1.5.2)
#   rails (2.1.1)
#   raindrops (0.13.0)
#   rake (0.9.2.2)
#   rdoc (3.9.5)
#   RedCloth (4.2.9)
#   rmagick (2.13.2)
#   test-unit (2.5.5)
#   unicorn (4.8.2)
#
################################################################################

local> ssh root@$IP_ADDR
root> passwd

# Install core packages.
root> apt-get update
root> apt-get upgrade
root> apt-get install build-essential man telnet wget vim emacs iptables mlocate

# Create account for webserver.
root> useradd -m -s /bin/bash $SITE
root> passwd -l $SITE
root> visudo
  # Add these lines to end. Allows users in "mo" group to "sudo su mo".
  %$SITE ALL = NOPASSWD: /bin/su $SITE
  %$SITE ALL = NOPASSWD: /bin/su - $SITE

# Create account for yourself.
root> useradd -m -s /bin/bash -G $SITE $USER
root> passwd $USER
root> logout

# Password-less ssh.
local> ssh-keygen -t rsa   # (if not already done)
local> ssh-copy-id -i ~/.ssh/id_rsa.pub $IP_ADDR
[NJW: The above didn't work on my Mac.  Instead I had to copy my public key
by hand to $USER/.ssh/authorized_keys on $IP_ADDR. Make sure that .ssh is 
only readable by $USER (chmod 700 .ssh) and .ssh/authorized_keys is only
writable by $USER, but otherwise readable (chmod 644 .ssh/authorized_keys).]

# Set up your accounts.
local> ssh $IP_ADDR
user> vi .bashrc
  # Add these at end.
  alias $SITE='cd /var/web/$SITE && sudo su $SITE'
user> su root
root> vi /root/.bashrc
  # Add these at end.
  export CFLAGS="-O3 -m64 -march=core2"
  alias $SITE='cd /var/web/$SITE && su $SITE'

# Disable direct root login for security purposes.
root> vi /etc/ssh/sshd_config
  PermitRootLogin no

# Configure firewall.
root> iptables -F
root> iptables -P INPUT ACCEPT
root> iptables -P OUTPUT ACCEPT
root> iptables -P FORWARD ACCEPT
root> iptables -A INPUT -m state --state RELATED,ESTABLISHED -j ACCEPT
root> iptables -A INPUT -i lo -j ACCEPT
root> iptables -A INPUT -p icmp -j ACCEPT
root> iptables -A INPUT -m state --state NEW -p tcp --dport 22   -j ACCEPT
root> iptables -A INPUT -m state --state NEW -p tcp --dport 80   -j ACCEPT
root> iptables -A INPUT -m state --state NEW -p tcp --dport 25   -j ACCEPT
root> iptables -A INPUT -m state --state NEW -p tcp --dport 3306 -j ACCEPT
root> iptables -A INPUT -m state --state NEW -p tcp --dport 53   -j ACCEPT
root> iptables -A INPUT -m state --state NEW -p udp --dport 53   -j ACCEPT
root> iptables -A INPUT   -j REJECT --reject-with icmp-host-prohibited
root> iptables -A FORWARD -j REJECT --reject-with icmp-host-prohibited
root> iptables-save > /etc/firewall.conf
root> chmod 600 /etc/firewall.conf
root> vi /etc/rc.local
  iptables-restore < /etc/firewall.conf

# Install most of the modules that we will need (except ruby).
root> apt-get install mysql-server mysql-client libmysqlclient-dev \
          libcurl4-openssl-dev libssl-dev git nginx libyaml-dev \
          imagemagick libmagickcore-dev libmagickwand-dev libjpeg-dev

# Install rvm and ruby.
root> curl -sSL https://get.rvm.io | bash -s stable --ruby=1.9.3
root> gpasswd -a $SITE rvm
root> echo "gem: --no-document" > /etc/gemrc
root> echo "gem: --no-document" > /root/.gemrc
root> echo "gem: --no-document" > /home/$SITE/.gemrc
root> echo "source /usr/local/rvm/scripts/rvm" >> /root/.bashrc
root> echo "source /usr/local/rvm/scripts/rvm" >> /home/mo/.bashrc

# Create directory for rails app.
root> mkdir /var/web
root> mkdir /var/web/$SITE
root> chown -R $SITE:$SITE /var/web/$SITE
root> chmod 750 /var/web/$SITE

# Make sure nginx user has access to rails directories.
root> usermod -a -G $SITE www-data

--------------------------------------------------------------------------------

# Now we're done with the generic installation.  Start installing Mushroom
# Observer in particular.
root> ln -s mo /var/web/mushroom-observer

# Install and configure rails apps.
root> mo
mo> git clone https://github.com/MushroomObserver/mushroom-observer .
[NJW: Remember to switch to another branch if you are testing this process
on code not on the master branch.]

mo> mkdir log public/images/{thumb,320,640,960,1280,orig}
mo> ln -s images public/local_images
mo> cp config/etc/bash_aliases.sh ~/.bash_aliases
mo> vi config/consts-site.rb
  config.smtp_password    = "xxx"
  config.pivotal_password = "xxx"

# Install gems.
mo> echo "gem 'unicorn'" >> Gemfile
mo> bundle install

# Configure nginx.
mo> exit
root> cp /var/web/mo/config/etc/nginx.conf /etc/nginx/
root> service nginx start
root> rm /usr/share/nginx/html/index.html    # (there's *got* to be a better way!)

# Create database.
root> mo
mo> mysql -u root -p
  create database mo_production;
  create user 'mo'@'localhost' identified by '$DATA_PASSWORD';
  # set password for 'mo'@'localhost' = password('$DATA_PASSWORD');
  grant all privileges on mo_production.* to 'mo'@'localhost' with grant option;
mo> cp config/database.yml-template config/database.yml
mo> vi config/database.yml
  # Change these values in production section: (other sections aren't needed)
  adapter:  mysql2
  database: mo_production
  password: $DATA_PASSWORD
  socket:   /var/run/mysqld/mysqld.sock    # ubuntu/debian
  # socket:   /var/lib/mysql/mysql.sock    # fedora/centos?
  encoding: utf8
mo> cd db
mo> scp $USER@$OLD_SERVER:/var/web/mushroom-observer/db/checkpoint.gz .
mo> gunzip checkpoint.gz
mo> mosqle checkpoint
[NJW Password is in the bash_aliases file and may need to be tweaked.]
mo> rm checkpoint

# Set up password-less ssh for image transfers.
mo> ssh-keygen -t rsa
  # Just press return three times, tell it to overwrite id_rsa.pub if it asks.
mo> ssh-copy-id -i ~/.ssh/id_rsa.pub cdmr@images.digitalmycology.com
  # Enter password.
# If the command above doesn't work, use this instead.
# mo> cat ~/.ssh/id_rsa.pub | ssh cdmr@images.digitalmycology.com \
#     'umask 077; mkdir -p ~/.ssh; cat >> ~/.ssh/authorized_keys'
mo> ssh cdmr@images.digitalmycology.com
  # (just make sure it works)
mo> exit

# Set up logrotate to archive passenger and rails logs.
root> vi /etc/logrotate.d/unicorn
  /var/web/mo/log/*.log {
    daily
    missingok
    rotate 7
    dateext
    compress
    delaycompress
    sharedscripts
    postrotate
      touch /var/web/mo/tmp/restart.txt
      scp /var/web/mo/log/*.gz cdmr@digitalmycology.com:logs.mushroomobserver.org/6sync
      mv /var/web/mo/log/*.gz /var/web/mo/log/old/
    endscript
  }

# Install our programs for resizing and rotating JPEG images.
root> gcc /var/web/mo/script/jpegresize.c -ljpeg -lm -O2 -o /usr/local/bin/jpegresize
root> gcc /var/web/mo/script/jpegexiforient.c -o /usr/local/bin/jpegexiforient
root> cp /var/web/mo/script/exifautotran /usr/local/bin/exifautotran
root> chmod 755 /usr/local/bin/exifautotran

--------------------------------------------------------------------------------

# Test basic system now.
root> mo
mo> rails server
# Look for errors.  Should start listening on port 3000.
# Break out when working.

# Once the system can boot successfully, make sure translations are installed.
mo> rake lang:update

# And make sure the database is up to date.
mo> rake db:migrate

# Now get unicorn to run right.
mo> uni start
[NJW: Ran "unicorn -E production -c config/unicorn.rb"]

# If there are any errors you'll find them in log/unicorn.stderr.log

# Should start listening on port 8080.
mo> lynx localhost:8080
[NJW: lynx is not installed, but wget works]

# Should request cookies, etc. and soon see the main page.

[NJW: At first it didn't respond to outside access, but Jason got it working by restart nginx and unicorn (which was down).
Jason suggested that: 'sudo service nginx reload' might have done the trick.]

--------------------------------------------------------------------------------

# Set up simple mailserver using postfix.
root> apt-get install postfix mutt
  # Select "internet site" when it prompts you.
  # Enter the proper hostname as "system mail name" (should resolve back with reverse DNS).
root> vi /etc/aliases
  # Change where root's mail goes.
  root: $USER,...
root> newaliases

# NOTE: After moving mail.mo.org to gmail, had to tweak postfix configuration:
root> vi /etc/postfix/main.cf
  # change myhostname to "$DOMAIN" (instead of "mail.$DOMAIN")
[NJW: Not needed?  Was already set to 'ror30.mushroomobserver.org']

# Test mail server.
root> su $USER
user> cd
user> echo $YOUR_EMAIL > .forward
user> vi .muttrc
  set realname="$FULL_NAME"
  set from="$USER@$DOMAIN"
  set use_from=yes
  set envelope_from=yes
user> echo "This is a test." | mutt -s test $YOUR_EMAIL
  # (Check /var/log/mail.log and /var/log/mail.err.)
user> exit

# Configure mail for MO.
root> mo
mo> cd
mo> vi .muttrc
  set realname="Mushroom Observer"
  set from="no-reply@mushroomobserver.org"
  set use_from=yes
  set envelope_from=yes
mo> vi .forward
  root
mo> echo "This is another test." | mutt -s test $YOUR_EMAIL
mo> exit

# Configure mail for rails.
# Should come configured "out of the box".
# Ask yourself a question via the website, e.g.:
#   http://$IP_ADDR/observer/ask_user_question/252
# Probably want to tail -f log/production.log if it's throwing errors.

# Configure no-reply to bounce correctly.
root> useradd -m no-reply
root> passwd -l no-reply
root> cp /var/web/mushroom-observer/script/autoreply              /usr/local/bin/autoreply
root> cp /var/web/mushroom-observer/config/etc/no-reply.muttrc    /home/no-reply/.muttrc
root> cp /var/web/mushroom-observer/config/etc/no-reply.autoreply /home/no-reply/.autoreply
root> cp /var/web/mushroom-observer/config/etc/no-reply.forward   /home/no-reply/.forward
root> chmod 644 /home/no-reply/.[maf]*
root> chmod 755 /usr/local/bin/autoreply

--------------------------------------------------------------------------------

# This is as far as I've gotten. -Jason 20140729






# Now the site should be mostly working.  We need to do some configuration to
# get image uploads to work, though.

# Make sure these have the correct image server(s).
mo> vim script/process_image
mo> vim script/update_images

# Test image upload on server:
#   http://$IP_ADDR/observer/create_observation
# Might need to run process_image once by hand before it will be fully automatic.
mo> ls public/images/orig
mo> script/process_image NNNNN jpg 0

# Grab thumbnails from image server.  (This takes hours!)
mo> script/update_images -v --sync dreamhost --download --thumb --320

--------------------------------------------------------------------------------

# Install cron jobs.

# They're all already present, just need to stick them in the crontab.
mo> crontab -e
  # (copy from config/etc/crontab)

--------------------------------------------------------------------------------

# This section deals with creating all the additional user accounts for
# members of CDMR to give them access to the server in case of emergency.

# Create an email to send to CDMR members explaining what we're doing.
root> cd
root> cat > password_email <<EOB
      I've created an account on the new mushroomobserver.org server for you.
      Please log in using an ssh (Secure Shell) client and change your
      password at your earliest convenience:

        ssh USER@$IP_ADDR
        (password = PASS)

      If you don't have an ssh client, or if you have any problems logging
      in, please let me know by replying to this email.

      As a member of CDMR, you should have already received a copy of the
      administrative details for Mushroom Observer, including the root
      password for this new server.  However, for security reasons, we do not
      allow direct ssh log-in as root, so in the unlikely event that you need
      to access the server, you will need to login using your individual
      account, instead.  Once logged in you can switch to root via "su root".

      If you prefer, you do not need to do any of this (let me know), but we
      would like at least a few members of CDMR to maintain active accounts
      on our servers, in case of emergency.

      Thank you for your time,
      Jason Hollinger
      Mushroom Observer System Administrator
      EOB

# Create user accounts, initialize with random password, mail password to root.
root> foreach user (anne darv mgwood mike velosa)
        set pass=`cat /dev/urandom | tr -dc A-Za-z0-9_ | head -c8`
        useradd -m -s /bin/tcsh $user
        echo "$user":"$pass" | chpasswd
        passwd -e $user
        cat password_email | sed "s/USER/$user/g" | sed "s/PASS/$pass/" | \
          mail -s "account on mushroomobserver.org" root
      end

# If you need to remove a user completely (e.g., a test user).
# root> userdel -r $user

# To copy over login information from another server instance.
# (NOTE: this doesn't seem to work going from Fedora to Ubuntu,
# it may only work if both are running the same distribution.)
# root> vi /etc/shadow
#   # (copy lines from the same file on the other server)

--------------------------------------------------------------------------------

# This section deals with sharing databases between multiple servers.
# NOTE: This is also useful for running two servers in parallel while testing
# a new installation

# Configure database to accept remote connections.
root> vi /etc/mysql/my/cnf
  # Comment out this line to allow remote connections.
  # bind-address = 127.0.0.1
root> mysql -u root -p
  create user 'mo'@'$OTHER_IP_ADDR' identified by '$DATA_PASSWORD';
  grant all privileges on mo_production.* to 'mo'@'$OTHER_IP_ADDR' with grant option;
root> ssh $USER@$OTHER_IP_ADDR
user> mysqladmin --protocol=tcp -u mo -p'$DATA_PASSWORD' --host=$IP_ADDR ping
user> exit

# To switch databases from old server to new server.
# First set up new server as above.
# Make sure everyone can connect to the new server's database.

# Shut down apache2 on all servers.
xxx_root> service apache2 stop

# Make snapshot of old database.
old_root> mo
old_mo> cd db
old_mo> ./dump

# Copy snapshot to new server.
new_root> mo
new_mo> cd db
new_mo> scp $USER@$OLD_IP_ADDR:/var/web/mushroom-observer/db/checkpoint.gz .
new_mo> gunzip checkpoint.gz
new_mo> mosqle checkpoint

# Reconfigure and restart all servers.
xxx_root> mo
xxx_mo> vi config/database.yml
  production:
    database: mo_production
    host:     $IP_ADDR
    username: mo
    password: $DATA_PASSWORD
xxx_mo> rake db:version   # (just a simple test)
xxx_mo> exit
xxx_root> service apache2 start

--------------------------------------------------------------------------------

# A few post-installation sanity-checks.  Reboot after everything is done,
# then check the following.

# Make sure firewall is working.  If there are more than a few lines it is
# probably correct, but you can also compare it with another server.
root> iptables-save

# Make sure all the critical processes started automatically.
# Look for sshd, nginx, unicorn, mysqld, postfix.
root> ps -ef

# If any are missing, do this on ubuntu/debian:
root> update-rc.d nginx   defaults
root> update-rc.d mysql   defaults
root> update-rc.d postfix defaults

