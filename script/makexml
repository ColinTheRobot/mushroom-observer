#!/usr/bin/env ruby
#
#  USAGE::
#
#    script/makexml
#
#  DESCRIPTION::
#
#  Puts the contents of name/eol into a file called eol.xml
#
################################################################################

require 'tempfile'
require 'net/http'
require 'erb'
include ERB::Util

class ParsedUrl
  def initialize(url)
    @url = url
    @m = url.match(/^http:\/\/([\w\.]+)(:[0-9]+)*(.*)$/)
  end
  
  def url; @url; end
  def local_url; @m[3]; end
  def host; @m[1]; end
  
  def port
    p = @m[2]
    p ? p[1..-1].to_i : 80
  end
end

def get_parsed_url
  localhost = ParsedUrl.new("http://localhost:3000/name/eol")
  if test_host(localhost.host, localhost.port)
    localhost
  else
    ParsedUrl.new("http://mushroomobserver.org/name/eol\?_js=off\&_new=true")
  end
end

def test_host(host, port)
  result = false
  begin
    Net::HTTP.start(host, port) do |http|
      result = true
    end
  rescue Exception => err
  end
  result
end

def get_content(filename, url)
  cmd = "wget -q -O #{filename} '#{url}'"
  system cmd
end

def get_size(filename)
  if File.exists?(filename)
    File::Stat.new(filename).size
  end
end

temp_file = Tempfile.new('eol')
temp_filename = temp_file.path
dest_filename = ARGV[0]

get_content(temp_filename, get_parsed_url.url)

new_size = get_size(temp_filename)
old_size = get_size(dest_filename)

if new_size
  if old_size.nil? or (new_size > old_size)
    File.rename(temp_filename, dest_filename)
    File.chmod(0644, dest_filename)
  elsif new_size < old_size*0.9
    print "Size of new EOL dump, #{new_size}, was less than 90% of the old dump, #{old_size}.\n"
    print "Left the old file in place.\n"
  end
else
  print "Unable to create the new EOL dump as #{temp_filename}.\n"
end
